#include "utils.h"

static int Sbox_g [16][16] = {
		// Fill the SBOX matrix
		/*        0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f */
		/*0*/  {0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
		/*1*/  {0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
		/*2*/  {0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
		/*3*/  {0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
		/*4*/  {0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
		/*5*/  {0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
		/*6*/  {0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
		/*7*/  {0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
		/*8*/  {0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
		/*9*/  {0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
		/*a*/  {0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
		/*b*/  {0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},
		/*c*/  {0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
		/*d*/  {0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
		/*e*/  {0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
		/*f*/  {0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}
	};
static int invSbox_g [16][16] = {
		// Fill the ISBOX matrix
		/*        0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f */
		/*0*/  {0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb},
		/*1*/  {0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb},
		/*2*/  {0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e},
		/*3*/  {0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25},
		/*4*/  {0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92},
		/*5*/  {0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84},
		/*6*/  {0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06},
		/*7*/  {0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b},
		/*8*/  {0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73},
		/*9*/  {0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e},
		/*a*/  {0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b},
		/*b*/  {0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4},
		/*c*/  {0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f},
		/*d*/  {0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef},
		/*e*/  {0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61},
		/*f*/  {0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d}
	};

void FillShiftRowCount(int* shiftRowCount, int m)
{
	if (m==16 || m==24) {
		shiftRowCount[0] = 1;
		shiftRowCount[1] = 2;
		shiftRowCount[2] = 3;
	}
	if (m==32) {
		shiftRowCount[0] = 1;
		shiftRowCount[1] = 3;
		shiftRowCount[2] = 4;
	}
}
void FillSbox(int** sbox, int n)
{
	for (int i = 0;i < n * n;i++) {
		sbox[i] = new int[n * n];
	}
	for (int i = 0;i < n * n;i++)
	{
		for (int j = 0;j < n * n;j++)
		{
			sbox[i][j] = Sbox_g[i][j];
		}
	}
}
void FillinvSbox(int** invsbox, int n)
{
	for (int i = 0;i < n * n;i++) {
		invsbox[i] = new int[n * n];
	}
	for (int i = 0;i < n * n;i++)
	{
		for (int j = 0;j < n * n;j++)
		{
			invsbox[i][j] = invSbox_g[i][j];
		}
	}
}

void FillState(int** Matrix, int row, int col, ifstream&f)
{
	for (int j = 0; j < col; j++)
	{
		for (int i = 0; i < row; i++)
		{
			Matrix[i][j] = f.get();
		}
	}	
	f.close();
}
void ShowState(int**S, int I, int J)
{
	for (int i = 0;i < I;i++)
	{
		for (int j = 0;j < J; j++)
		{
				cout <<hex<< S[i][j] << " ";
		}
		cout << endl;
	}
	cout << endl << endl;
}
int opp(int m)
{
	int hj;
	if (m >=  256) 
	{
		int jk = m / 16;
		hj = (m % 16)+(jk%16)*16;
		return hj;
	}
	return m;
}
void Mult(int*r)
{
	int a[4];
	int b[4];
	int c;
	unsigned char h;
	for (int c = 0;c < 4;c++)
	{
		a[c] = r[c];
		h = (unsigned char)((signed char)r[c] >> 7);
		b[c] = r[c] << 1;
		b[c] ^= 0x1b & h;
	}

	r[0] = b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1];
	r[1] = b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2];
	r[2] = b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3];
	r[3] = b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0];

	
}
void Mult2(int*r)
{

	int a[4];
	int b[4];
	int c;
	unsigned char h;
	for (int c = 0;c < 4;c++)
	{
		a[c] = r[c];
		h = (unsigned char)((signed char)r[c] >> 7);
		b[c] = r[c] << 1;
		b[c] ^= 0x1b & h;
	}

	r[0] = Multiply(a[0], 0x0e) ^ Multiply(a[1], 0x0b) ^ Multiply(a[2], 0x0d) ^ Multiply(a[3], 0x09);
	r[1] = Multiply(a[0], 0x09) ^ Multiply(a[1], 0x0e) ^ Multiply(a[2], 0x0b) ^ Multiply(a[3], 0x0d);
	r[2] = Multiply(a[0], 0x0d) ^ Multiply(a[1], 0x09) ^ Multiply(a[2], 0x0e) ^ Multiply(a[3], 0x0b);
	r[3] = Multiply(a[0], 0x0b) ^ Multiply(a[1], 0x0d) ^ Multiply(a[2], 0x09) ^ Multiply(a[3], 0x0e);

}
void OP(int*temp, int J, int**W)//возвращает предыдущее слово
{
	for (int i = 0;i < 4;i++)
		temp[i] = W[i][J];
}
void Rotl(int W[4], int o)
{
	int c=W[0];
	for (int i = 0;i < 3;i++)
		W[i] = W[i + 1];
	W[3] = c;
}

void ShiftRow(int**m, int I, int J, int c[3])//сдвиг последних трех строк
{
	for (int i = 1;i < I;i++)
	{
		////делаем буффрный массив для сохранения данных
		int *buff = new int[J];
		int C = c[i - 1];////на какое колво байт двигать влево
		
		for (int j = 0;j < J;j++)///скопировали значения в буфф
			buff[j] = m[i][j];
		for (int j = 0;j < J - C;j++)
			m[i][j] = m[i][j + C];
		for (int j = J - C, h=0;j < J, h<J;j++, h++)
		{
			m[i][j] = buff[h];
		}
	}
}
void InvShiftRow(int**m, int I, int J, int c[3])
{
	for (int i = 1;i < I;i++)
	{
		////делаем буффрный массив для сохранения данных
		int *buff = new int[J];
		int C = c[i - 1];////на какое колво байт двигать влево

		for (int j = 0;j < J;j++)///скопировали значения в буфф
			buff[j] = m[i][j];

		for (int j = J - 1;j >= C;j--)
			m[i][j] = buff[j - C];
		for (int j = C-1,  h = J - 1;j >= 0, h >= 0;h--, j--)
			m[i][j] = buff[h];
	}
}
void SubByte(int**m, int I, int J, int**S)
{
	for (int i = 0;i < I;i++)
	{
		for (int j = 0;j < J;j++)
		{
			m[i][j] = S[m[i][j] / 16][m[i][j] % 16];
		}
	}
}
void SubByte2(int m[4],  int**Sbox)
{
	for (int i = 0;i < 4;i++)
	{
		m[i] = Sbox[m[i] / 16][m[i] % 16];
	}
}
void InvMixColumn(int**m, int I, int J)
{
	for (int j = 0;j < J;j++)
	{
		int *buff = new int[4];
		for (int i = 0;i < I;i++)
			buff[i] = m[i][j];

		Mult2(buff);
		for (int i = 0;i < I;i++)
		{
			m[i][j] = opp(buff[i]);
		}
	}
}
void MixColumn(int**m, int I, int J)
{	
	for (int j = 0;j < J;j++)
	{
		int *buff = new int[4];
		for (int i = 0;i < I;i++)
			buff[i] = m[i][j];
		
		Mult(buff);
		for (int i = 0;i < I;i++)
		{
			m[i][j] = opp(buff[i]);
		}
	}
}
void AddRoundKey(int**m, int I, int J, int r, int**W)
{
	int**K = new int*[I];
	for (int i = 0;i < I;i++)
		K[i] = new int[J];
	for (int j = r * J, l=0;j < r*J + J, l<J;j++, l++)///выписала текущий раундовый ключ в К
	{
		for (int i = 0, p = 0;i < I, p < I;p++, i++)
			K[p][l] = W[i][j];
	}
	for (int i = 0;i < I;i++)
	{
		for (int j = 0;j < J;j++)
			m[i][j] ^= K[i][j];
	}
}


void Cipher(int**M,int**h, int N, int r, int**SBox)
{
	int ShiftRowC[3] = { 1,  2,  3 };
	int Rcon[4][11] = { { 0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36 },{ 0x00,0x00,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 },{ 0x00,0x00,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 },{ 0x00,0x00,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 } };//массив который состоит из битов 32 разрядного слова и является постоянным для данного раундадля AES 128
	int E = N * (r + 1);////количество 4х байтовых слов в расширенном ключе
	int**W = new int*[N];
	for (int i = 0;i < N;i++)
		W[i] = new int[E];
	for (int j = 0;j < N;j++)
	{
		for (int i = 0;i < N;i++)
		{
			W[i][j] = h[i][j];
		}
	}
	for (int j = N;j < N*(r + 1);j += N) 
	{
		int chek[4];
		chek[0] = W[0][j - 1];
		chek[1] = W[1][j - 1];
		chek[2] = W[2][j - 1];
		chek[3] = W[3][j - 1];
		Rotl(chek, 1);
		SubByte2(chek, SBox);
		for (int i = 0;i < N;i++)
		{
			W[i][j] = W[i][j - N] ^ chek[i] ^ Rcon[i / N][j];//o-константа на которую цикличский сдвиг происходит
		}
		for (int l = 1;l < N&&l + j < N*(r + 1);l++)
		{
			for (int h = 0;h < N;h++)
			{
				W[h][l + j] = W[h][l + j - N] ^ W[h][l + j - 1];
			}
		}
	}
	AddRoundKey(M, N, N, 0, W);
	for (int i = 1;i < r;i++)
	{
		SubByte(M, N, N, SBox);
		ShiftRow(M, N, N, ShiftRowC);
		MixColumn(M, N, N);
		AddRoundKey(M, N, N, i, W);
	}
	SubByte(M, N, N, SBox);
	ShiftRow(M, N, N, ShiftRowC);
	AddRoundKey(M, N, N, r, W);
}

void Init(int**inpM, int**M, int I, int n)
{
	for (int i = 0; i < n; i++) {
		for(int j = 0; j < n; j++) {
			inpM[i][j] = M[i][j + n * I];
		}
	}
}
void Ex(int**M, int**H, int n)
{
	for (int i = 0; i < n; i++) {
		for(int j = 0; j < n; j++) {
			M[i][j] ^= H[i][j];
		}
	}
}